
let a;
let c;


const faces = [
  [2, 3, 7],
  [2, 8, 3],
  [4, 5, 6],
  [5, 4, 9],
  [7, 6, 12],
  [6, 7, 11],
  [10, 11, 3],
  [11, 10, 4],
  [8, 9, 10],
  [9, 8, 1],
  [12, 1, 2],
  [1, 12, 5],
  [7, 3, 11],
  [2, 7, 12],
  [4, 6, 11],
  [6, 5, 12],
  [3, 8, 10],
  [8, 2, 1],
  [4, 10, 9],
  [5, 9, 1],
];

let vertices;

let icosaeder;
let head;

function preload(){
    head=loadModel('.stl');

function setup(){
    createCanvas(600,600,WEBGL);
    
    let factor=(1+Math.sqrt(5))/2.0;
    c=400;
    a=c/factor;

    vertices = [
      { x: 0.0, y: -a, z: c },
      { x: c, y: 0.0, z: a },
      { x: c, y: 0.0, z: -a },
      { x: -c, y: 0.0, z: -a },
      { x: -c, y: 0.0, z: a },
      { x: -a, y: c, z: 0.0 },
      { x: a, y: c, z: 0.0 },
      { x: a, y: -c, z: 0.0 },
      { x: -a, y: -c, z: 0.0 },
      { x: 0.0, y: -a, z: -c },
      { x: 0.0, y: a, z: -c },
      { x: 0.0, y: a, z: c },
    ];


    icosaeder = new p5.Geometry();
    for(let i=0;i<12;i++){
	//let v=vertices[i];
	//icosaeder.vertices.push( createVector(v.x,v.y,v.z) );
	icosaeder.vertices.push(vertices[i]);
	icosaeder.faces.push(faces[i][0]);
	icosaeder.faces.push(faces[i][1]);
	icosaeder.faces.push(faces[i][2]);
    }
    //console.log(icosaeder.vertices)
    //console.log(icosaeder.faces)
    //console.log(icosaeder);
    //icosaeder.computeNormals();
}

function draw(){
    background(128);
    orbitControl();
    for(let i=0;i<12;i++){
	let v=vertices[i];
	push();
	translate(v.x,v.y,v.z);
	sphere(10);
	pop();
    }
    //model(icosaeder);
}

